#!/usr/bin/env python


##### ##### ##### ##### ##### ##### #####
#                                       #
#                 graftM                #
#                                       #
#  A pipeline for gene centric analyses #
#          of metagenome datasets       #
#                                       #
##### ##### ##### ##### ##### ##### #####

__author__ = "Joel Boyd, Ben Woodcroft"
__copyright__ = "Copyright 2014"
__credits__ = ["Joel Boyd", "Ben Woodcroft"]
__license__ = "GPL3"
__maintainer__ = "Joel Boyd, Ben Woodcroft"
__email__ = "joel.boyd near uq.net.au, b.woodcroft near uq.edu.au"
__status__ = "Development"
__version__ = "0.4.2"

from graftm.Run import Run
import argparse
import sys
import IPython

def phelp():
    print """
                                       GraftM  %s                               
       
             A suite of tools for the rapid analysis of large sequence datasets.
    
                                Joel Boyd, Ben Woodcroft
                                
=====================================================================================================
COMMUNITY PROFILING 
    
    graft       -       Search for and phylogenetically classify reads associated with a single 
                        marker gene, and construct a community profile
                        e.g. usage:
                            graftM graft --forward <READS.fq.gz> --graftm_package <GRAFTM_PACKAGE>
                          
    pathfinder  -       Search for and phylogenetically classify reads associated with a whole 
                        metabolic pathway
                        e.g. usage:
                            Not finished - be patient!
=====================================================================================================
UTILITIES

    assemble    -       Cluster and attempt to assemble reads at the most resolved taxonomic
                        rank possible
                        e.g. usage:
                            graftM assemble --profile <GRAFTM_PROFILE>
                            
    manage      -       Tools to manage the output of GraftM such as:
                            * --return - Return reads assigned to a given lineage
                            
                        e.g. usage:
                            graftM manage --profile <GRAFTM_PROFILE> --<GRAFTM_TASK>
                        
    filter      -       Filter out rRNA reads from a transcriptome
                        e.g. usage:
                            graftM filter --reads <READS> --graftM_package <GRAFTM_PACKAGE> 
=====================================================================================================
""" % (__version__)
    
    

if __name__ == '__main__':
    
    parser = argparse.ArgumentParser(add_help=False)
    
    subparsers = parser.add_subparsers(help="--", dest='subparser_name')
    
    
    
    # Standard GraftM pipeline.
    graft_parser = subparsers.add_parser('graft',
                                        description='Search and classify marker genes to construct community profiles',
                                        epilog='Joel Boyd, Ben Woodcroft')
                                        
    graft_parser.add_argument('--forward', metavar='forward read (or single read file)', type=str, help='comma separated list of forward reads .fa, or .fq.gz format.', required=True)
    graft_parser.add_argument('--reverse', metavar='reverse read', type=str, help='[do NOT use unless you understand the difficulties with this] Optional reverse raw sequence file in .fa, or .fq.gz format', default=argparse.SUPPRESS)
    graft_parser.add_argument('--eval', metavar='evalue', type=str, help='evalue cutoff for the hmmsearch (default = 1e-5)', default= '1e-5')
    graft_parser.add_argument('--threads', metavar='threads', type=str, help='number of threads to use', default='5')
    graft_parser.add_argument('--placements_cutoff', metavar='confidence', type=str, help='Cutoff of placement confidence level (0.5 - 1), default = 0.75', default=0.75)
    graft_parser.add_argument('--graftm_package', metavar='reference_package', type=str, help='Reference package of gene family', default=argparse.SUPPRESS)
    graft_parser.add_argument('--force', action="store_true", help='Force overwrite the output directory, even if one already exists with the same name (default=False)', default=False)
    graft_parser.add_argument('--input_sequence_type', help='Specify whether the input sequence is "nucleotide" or "protein" sequence data (default=will attempt to auto-detect)', choices = ['protein', 'nucleotide'],  default=argparse.SUPPRESS)
    graft_parser.add_argument('--skip_placement', action="store_true", help='Stop after reads have been identified and aligned (default=False)', default=False)
    graft_parser.add_argument('--search_only', action="store_true", help='Stop after reads have been identified (default=False)', default=False)
    graft_parser.add_argument('--check_total_euks', action="store_true", help='Search whole sample for euks (default=False)', default=False)
    graft_parser.add_argument('--hmm_file', type=str, help='HMM file that hmmsearch uses', default=argparse.SUPPRESS)
    graft_parser.add_argument('--output_statistics', type=str, help='output simple runtime statistics into this file', default=argparse.SUPPRESS)
    graft_parser.add_argument('--reference_package', type=str, help='Reference package that pplacer uses', default=argparse.SUPPRESS)
    graft_parser.add_argument('--output_stats', metavar='output directory', type=str, help='Specify an output directory (default is the file name) If you are looking for more than one marker gene in the same directory, you will definitely need this flag to avoid clobbering.', default=argparse.SUPPRESS)
    graft_parser.add_argument('--version', action='version', version='graftM v%s' % __version__)
    
    # Filter pipeline - Remove rRNA genes from transcriptome dataset.
    filter_parser = subparsers.add_parser('filter',
                                         description='Remove rRNA genes from transcriptome dataset.',
                                         epilog='Joel Boyd, Ben Woodcroft')
        # Required
    filter_parser.add_argument('--reads', metavar='<READS>', help='File to be filtered', required=True)
    filter_parser.add_argument('--filter_hmms', metavar='<FILTER_HMMS>', help='Directory with HMMs to use when filtering.', required=True)
    
        # Optional
    filter_parser.add_argument('--output', metavar='<OUTPUT>', help='Directory within which to place filtered reads, and sorted hits')
    

    # Assemble - Attempt to assemble as many full length genes as possible.
    assemble_parser = subparsers.add_parser('assemble',
                                            description='Attempt to assemble as many genes as possible.',
                                            epilog='Joel Boyd, Ben Woodcroft')
                                            
    assemble_parser.add_argument('--graft_run', metavar='File produced ', help='guppy file produced by graftM, comma separated (default=True)', default=True)
    assemble_parser.add_argument('--kmer', metavar='k-mer',  help='k-mer to use for assembly with velvet', default = '51')
    assemble_parser.add_argument('--assembly_type', metavar='type of assembly', help='phrap or velvet assembly',choices = ['phrap', 'velvet', 'finishm'], default='velvet')
    assemble_parser.add_argument('--version', action='version', version='graftM v%s' % __version__)
    assemble_parser.add_argument('--finish', action = 'store_true', help='finish the velvet assembly with an overlap assembly (default=False)', default=False)

    # Manage - various tools that make the management of graftM output easier
    
    manage_parser = subparsers.add_parser('manage',
                                            description='Attempt to assemble as many genes as possible.',
                                            epilog='Joel Boyd, Ben Woodcroft')
                                            
    manage_parser.add_argument('--seq', metavar='The reads from this lineage will be returned', help='guppy file produced by graftM, comma separated (default=False)', default=False)
    manage_parser.add_argument('--profile', metavar='graftM_profile', help='GraftM profile produced by graftM graft run (required=True)', required=True)
    manage_parser.add_argument('--non_cumil', action = 'store_true', help='Return all sequences exclusively at this taxonomic rank (i.e. do not return sequences that were classified to a higher resolution, default=False)', default=False)
    manage_parser.add_argument('--file', action = 'store_true', help='Lineages are in a file, one entry per line (default=False)', default=False)
    manage_parser.add_argument('--version', action='version', version='graftM v%s' % __version__)
    
    # Pathfinder - Find a whole pathway of genes in a metagenome/transcriptome.
    pathfinder_parser = subparsers.add_parser('pathfinder',
                                              description='Find a whole pathway of genes in a metagenome/transcriptome.',
                                              epilog='Joel Boyd, Ben Woodcroft')

    
    
    

    if(len(sys.argv) == 1 or sys.argv[1] == '-h' or sys.argv == '--help'):
        phelp()
        exit(0)
    else:
        args = parser.parse_args()
    
    Run(args).main()
    exit(0)
    
    # Summary of class abbreviations:
    # Messenger         = M
    # GraftMFiles       = GMF
    # Alignment_Manager = AM
    # Hmmer             = H
    # Pplacer           = P
    # HouseKeeping      = HK
    # Stats_And_Summary = SAS